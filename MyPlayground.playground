import UIKit
//#1
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
func findMaximumSubstring(inputString: String) -> String {
    var maximumSubstring = ""
    let characters = Array(inputString)

    for startIndex in 0..<characters.count {
        for endIndex in (startIndex + 1)..<characters.count {
            let substring = String(characters[startIndex...endIndex])
            let letterCount = substring.filter { $0.isLetter }.count
            let numberCount = substring.filter { $0.isNumber }.count

            if letterCount == numberCount && substring.count > maximumSubstring.count {
                maximumSubstring = substring
            }
        }
    }

    return maximumSubstring
}

let inputString = "1abc1234"
let maximumSubstring = findMaximumSubstring(inputString: inputString)
print(maximumSubstring)


//Пространственная сложность - O(N) - т.к код использует несколько переменных, но их количество не зависит от размера входной строки
//Временная сложность - O(N^3) - т.к  цикл выполняется от 0 до n-1, где n - длина входной строки, внутри цикла создается substring, которая требует  О(endIndex - startIndex + 1), тк цикл выполняетяся для всех комбинаций наччального и конечного индекса, то создает доп множитель О(N) => O(N*N*(N-1)) = O(N^3) - O(N^2) = O(N^3)

//Можно ускорить работу до O(N^2) во временной сложности:
func findMaxSubstring(inputText: String) -> String {
    let characters = Array(inputString)
    let n = characters.count
    var maximumSubstring = ""

    for startIndex in 0..<n {
        var letterCount = 0
        var numberCount = 0

        for endIndex in startIndex..<n {
            let char = characters[endIndex]

            if char.isLetter {
                letterCount += 1
            } else if char.isNumber {
                numberCount += 1
            }

            if letterCount == numberCount && endIndex - startIndex + 1 > maximumSubstring.count {
                maximumSubstring = String(characters[startIndex...endIndex])
            }
        }
    }

    return maximumSubstring
}

let inputText = "1abc1234"
let maxiSubstring = findMaxSubstring(inputText: inputText)
print(maxiSubstring)

//Тут создается infoArrayEqualCharacters (двумерный массив) для хранения информации о равенстве количестве букв и цифр, чтобы избежать потворных вычислений и сократить временную сложность
